rule all:
    input:
        'falcon-comb_LmagMIC.pogigwasc_realtrons.protein.faa',
        'falcon-comb_LmagMIC.pogigwasc_realtrons.no_rep.protein.faa',
        'falcon-comb_LmagMIC.pogigwasc_realtrons.in_rep.protein.faa',
        'falcon-comb_LmagMIC.cmsearch.filtered.gff',
        'falcon-comb_LmagMIC.tRNAscan-SE'

rule convert_tRNAscan_gff: # troubleshooting required
    input:
        '{asm}.tRNAscan-SE',
    output:
        '{asm}.tRNAscan-SE.gff'
    conda: 'envs/pogigwasc.yml'
    shell:
        r"""
        Intronarrator/ncRNA_searches/tRNAscan-SE_to_GFF.py {input} > {output}
        """

rule spilt_ref_tRNA:
    input:
        ref_orig=lambda wildcards: config[wildcards.asm]['ref_orig']
    output:
        tr='{asm}.tRNAscan-SE',
        tr_aln='{asm}.tRNAscan-SE.aln'
    params:
        fa='{asm}.split_seqs',
        numsplit=100
    conda: 'envs/pogigwasc.yml'
    threads: 8
    shell:
        r"""
        mkdir -p {params.fa};
        opt/kentutils/faSplit sequence {input.ref_orig} {params.numsplit} {params.fa}/spl;
        for i in {params.fa}/spl*; do
          tRNAscan-SE --thread {threads} -E -o ${{i}}.tRNAscan-SE -f ${{i}}.tRNAscan-SE.aln ${{i}};
        done
        cat {params.fa}/spl*.tRNAscan-SE.aln > {output.tr_aln};
        head -n3 {params.fa}/spl000.fa.tRNAscan-SE > {output.tr};
        for i in {params.fa}/spl*.tRNAscan-SE; do
            tail -n+4 ${{i}} >> {output.tr};
        done
        """

rule find_filter_ncRNAs:
    input:
        ref_orig=lambda wildcards: config[wildcards.asm]['ref_orig']
    output:
        tblout='{asm}.cmsearch',
        aln='{asm}.cmsearch.aln',
        tblout_filtered='{asm}.cmsearch.filtered',
        tblout_filtered_gff='{asm}.cmsearch.filtered.gff'
    conda: 'envs/pogigwasc.yml'
    ##Find ncRNAs (including tRNAs) and output GFFs for them
    threads: 16
    shell:
        r"""
        cmsearch --cpu {threads} --tblout {output.tblout} Intronarrator/db/rfam_minimal.cm {input.ref_orig} > {output.aln};
        Intronarrator/ncRNA_searches/infernal_filter.py {output.tblout} > {output.tblout_filtered};
        Intronarrator/ncRNA_searches/infernal_to_GFF.py {output.tblout_filtered} > {output.tblout_filtered_gff};
        """

rule proteins_in_overlap_trf:
    """Instead of applying bedtools intersect to the GFF, we simply subtract
    protein sequences that do not overlap repeats from set of all protein
    sequences, to avoid problems caused by CDSs that overlap partially with
    repeat annotations"""
    input:
        no_rep='{asm}.pogigwasc_realtrons.no_rep.protein.faa',
        all='{asm}.pogigwasc_realtrons.protein.faa'
    output:
        no_rep_list='{asm}.pogigwasc_realtrons.no_rep.protein.list',
        in_rep_faa='{asm}.pogigwasc_realtrons.in_rep.protein.faa'
    shell:
        r"""
        grep '>' {input.no_rep} | sed 's/>//' | cut -f1 -d' ' > {output.no_rep_list};
        opt/kentutils/faSomeRecords -exclude {input.all} {output.no_rep_list} {output.in_rep_faa};
        """

rule translate_proteins_no_overlap_trf:
    input:
        ref_orig=lambda wildcards: config[wildcards.asm]['ref_orig'],
        gff3_norep='falcon-comb_LmagMIC.pogigwasc_realtrons.no_rep.gff3'
    output:
        '{asm}.pogigwasc_realtrons.no_rep.protein.faa'
    conda: 'envs/pogigwasc.yml'
    params:
        gencode=27,
        prefix='{asm}.pogigwasc_realtrons.no_rep'
    shell:
        r"""
        python pogigwasc-utils/translate_proteins.py --gff {input.gff3_norep} --assembly {input.ref_orig} --trans_table {params.gencode} --output {params.prefix}
        """

rule no_overlap_trf:
    input:
        realtrons_gff='{asm}.pogigwasc_realtrons.gff3',
        trf=lambda wildcards: config[wildcards.asm]['trf_min1000']
    output:
        '{asm}.pogigwasc_realtrons.no_rep.gff3'
    conda: 'envs/pogigwasc.yml'
    shell:
        r"""
        bedtools intersect -v -f 1.0 -a {input.realtrons_gff} -b {input.trf} > {output}
        """

rule translate_proteins:
    input: 
        realtrons_gff='{asm}.pogigwasc_realtrons.gff3',
        ref_orig=lambda wildcards: config[wildcards.asm]['ref_orig']
    output:
        '{asm}.pogigwasc_realtrons.protein.faa'
    params:
        gencode=27,
        prefix='{asm}.pogigwasc_realtrons'
    conda: 'envs/pogigwasc.yml'
    shell:
        r"""
        python pogigwasc-utils/translate_proteins.py --gff {input.realtrons_gff} --assembly {input.ref_orig} --trans_table {params.gencode} --output {params.prefix}
        """

rule add_realtrons:
    input:
        realtrons=lambda wildcards: config[wildcards.asm]['realtrons_gff'],
        features='{asm}.0.2.minus_introns.ncRNA_hard_masked.recomb.pogigwasc.features.gff3'
    output: '{asm}.pogigwasc_realtrons.gff3'
    params: 
        prefix='{asm}.pogigwasc_realtrons'
    log: 'logs/add_realtrons.{asm}.log'
    conda: 'envs/pogigwasc.yml'
    shell:
        r"""
        python pogigwasc-utils/add_realtrons_pogigwasc_intronless.py --introns {input.realtrons} --features {input.features} --output {params.prefix} --dump > {log}
        """

rule recombine_contigs:
    """recombine annotation for split scaffolds"""
    input: 
        split_pogigwasc='{asm}.0.2.minus_introns.ncRNA_hard_masked.split.min1k.pogigwasc.gff3',
        split_json='{asm}.0.2.minus_introns.ncRNA_hard_masked.split.json'
    output:
        '{asm}.0.2.minus_introns.ncRNA_hard_masked.recomb.pogigwasc.features.gff3'
    conda: 'envs/pogigwasc.yml'
    params:
        prefix='{asm}.0.2.minus_introns.ncRNA_hard_masked.recomb.pogigwasc'
    shell:
        r"""
        python pogigwasc-utils/recombine_contigs.py --json {input.split_json} --features {input.split_pogigwasc} --output {params.prefix}
        """

rule concatenate_GFF:
    """concatenate Pogigwasc GFF files"""
    input: '{asm}.split_pogigwasc'
    output: '{asm}.0.2.minus_introns.ncRNA_hard_masked.split.min1k.pogigwasc.gff3'
    shell:
        r"""
        cat {input}/*.gff3 > {output}
        """

rule run_parafly:
    input:
        '{asm}.parafly_cmds.list'
    output:
        completed='{asm}.parafly_cmds.list.completed',
        outdir=directory('{asm}.split_pogigwasc'),
        outdir_logs=directory('{asm}.split_pogigwasc_logs')
    log: 'logs/run_parafly.{asm}.log'
    threads: 8
    conda: 'envs/parafly.yml'
    params:
        failed_cmds='{asm}.parafly_cmds.list.failed'
    # nb each job requires about 2 Gb of memory
    shell:
        r"""
        mkdir -p {output.outdir};
        mkdir -p {output.outdir_logs};
        ParaFly -c {input} -CPU {threads} -failed_cmds {params.failed_cmds} -vv &> {log};
        """

rule make_cmds:
    """Make commands for running pogigwasc with ParaFly"""
    input:
        '{asm}.split_fasta/'
    output:
        '{asm}.parafly_cmds.list'
    params:
        pogigwasc_param='pogigwasc/resources/de/vetter/pogigwasc/parameter/parameters-examplefile.properties'
    shell:
        r"""
        for i in {input}/spl*; do
          SPLNAME=$(basename $i);
          SPLPREFIX=${{SPLNAME%%.fa}};
          SPLOUT={wildcards.asm}.split_pogigwasc/${{SPLPREFIX}}.gff3;
          echo "pogigwasc/target/appassembler/bin/ghmm-predict -i $i --no-introns -p {params.pogigwasc_param} -o $SPLOUT > {wildcards.asm}.split_pogigwasc_logs/${{SPLPREFIX}}.log" >> {output};
        done
        """
    # example of a command
    # ../pogigwasc/target/appassembler/bin/ghmm-predict -i contig_9482.fasta \
    #  --no-introns \
    #  -p ../pogigwasc/resources/de/vetter/pogigwasc/parameter/parameters-examplefile.properties \
    #  -o contig_9482.pogiwasc.gff3


rule split_scaffolds:
    """Split intronless ref assembly on Ns to produce pure contigs

    Reference assembly: introns spliced out, also contains scaffolding gaps and
    hard masked ncRNA genes. Split on Ns to produce pure contigs (absolutely no
    Ns) as required by Pogigwasc
    """
    input: 
        lambda wildcards: config[wildcards.asm]['ref_intronless_masked']
    output: 
        split='{asm}.0.2.minus_introns.ncRNA_hard_masked.split.fasta',
        split_json='{asm}.0.2.minus_introns.ncRNA_hard_masked.split.json',
        split_min1k='{asm}.0.2.minus_introns.ncRNA_hard_masked.split.min1k.fasta',
        split_fasta=directory('{asm}.split_fasta')
    params:
        out_prefix='{asm}.0.2.minus_introns.ncRNA_hard_masked.split'
    conda: 'envs/pogigwasc.yml'
    shell:
        r"""
        python pogigwasc-utils/split_scaffolds.py --input {input} --output {params.out_prefix};
        # make folders to hold split files
        mkdir -p {output.split_fasta}; 
        # filter out contigs < 1 kbp unlikely to contain genes
        opt/kentutils/faFilter -minSize=1000 {output.split} {output.split_min1k}
        # split into smaller input files to parallelize
        opt/kentutils/faSplit sequence {output.split_min1k} 200 {output.split_fasta}/spl
        """
